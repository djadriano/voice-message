{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/js/layout/App.svelte",
    "../src/js/pages/Recorder.svelte",
    "../src/js/components/Header.svelte",
    "../src/js/components/Recorder.svelte",
    "../src/js/components/Counter.svelte"
  ],
  "sourcesContent": [
    "<style>\n  main {\n    position: relative;\n  }\n</style>\n\n<script>\n  // -----------------------------------------------\n  // Imports\n  // -----------------------------------------------\n\n  import { Router, Route } from 'svelte-routing';\n  import { user } from '../utils/store.js';\n  import Header from '../components/Header.svelte';\n  import LoginPage from '../pages/Login.svelte';\n  import RecorderPage from '../pages/Recorder.svelte';\n  import PreviewPage from '../pages/Preview.svelte';\n  import SuccessPage from '../pages/Success.svelte';\n\n  // -----------------------------------------------\n  // State variables\n  // -----------------------------------------------\n\n  export let url = '';\n</script>\n\n<main>\n  <Router {url}>\n    {#if $user.logged}\n      <Header name=\"{$user.displayName}\" photo=\"{$user.photoURL}\" />\n    {/if}\n    <Route path=\"success\" component=\"{SuccessPage}\" />\n    <Route path=\"preview\" component=\"{PreviewPage}\" />\n    <Route path=\"recorder\" component=\"{RecorderPage}\" />\n    <Route path=\"/\" component=\"{LoginPage}\" />\n  </Router>\n</main>\n",
    "<style>\n  .recorder {\n    position: relative;\n  }\n</style>\n\n<script>\n  // -----------------------------------------------\n  // Imports\n  // -----------------------------------------------\n\n  import { navigate } from 'svelte-routing';\n  import Recorder from '../components/Recorder.svelte';\n\n  // -----------------------------------------------\n  // Methods\n  // -----------------------------------------------\n\n  function onRecorded() {\n    navigate('/preview');\n  }\n</script>\n\n<section class=\"recorder\">\n  <Recorder on:finish=\"{onRecorded}\" />\n</section>\n",
    "<style>\n  figure {\n    width: 100px;\n    height: 100px;\n    border: 1px solid;\n  }\n</style>\n\n<script>\n  import { fade } from 'svelte/transition';\n\n  // -----------------------------------------------\n  // State variables\n  // -----------------------------------------------\n\n  export let name;\n  export let photo;\n</script>\n\n<header>\n  {#if photo}\n    <figure transition:fade>\n      <img src=\"{photo}\" alt=\"{name}\" />\n    </figure>\n  {/if}\n  <h1 transition:fade=\"{{ delay: 1000 }}\">Hello {name}</h1>\n</header>\n",
    "<style>\n  button {\n    background: green;\n    color: white;\n    border: 0;\n  }\n\n  button.active {\n    background: red;\n    animation: foo 250ms infinite;\n  }\n\n  @keyframes foo {\n    from {\n      background: green;\n    }\n    to {\n      background: red;\n    }\n  }\n</style>\n\n<script>\n  // -----------------------------------------------\n  // Imports\n  // -----------------------------------------------\n\n  import { createEventDispatcher } from 'svelte';\n  import { recorder } from '../utils/store.js';\n  import AudioRecorder from 'audio-recorder-polyfill';\n  import Counter from './Counter.svelte';\n\n  // -----------------------------------------------\n  // Constants\n  // -----------------------------------------------\n\n  const dispatch = createEventDispatcher();\n  const constraints = {\n    audio: true,\n    video: false,\n  };\n\n  // -----------------------------------------------\n  // State variables\n  // -----------------------------------------------\n\n  let mediaRecorder = '';\n  let buttonLabel = {\n    START: 'Start record',\n    STARTED: 'Stop record',\n  };\n\n  // -----------------------------------------------\n  // Methods\n  // -----------------------------------------------\n\n  function toggleRecord() {\n    const { status } = $recorder;\n\n    status === 'START' ? start() : stop();\n  }\n\n  async function start() {\n    recorder.set({\n      ...$recorder,\n      status: 'STARTED',\n    });\n\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia(constraints);\n\n      mediaRecorder = new AudioRecorder(stream);\n      mediaRecorder.start();\n      mediaRecorder.addEventListener('dataavailable', hasMediaData);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  function hasMediaData(evt) {\n    const file = evt.data;\n\n    recorder.set({\n      ...$recorder,\n      file,\n    });\n\n    dispatch('finish', file);\n    setTimeout(stopBrowserMic, 1000);\n  }\n\n  function stop() {\n    mediaRecorder.stop();\n\n    recorder.set({\n      ...$recorder,\n      status: 'STOP',\n    });\n  }\n\n  function stopBrowserMic() {\n    mediaRecorder.stream.getTracks().forEach(i => i.stop());\n  }\n</script>\n\n<section>\n  <button on:click=\"{toggleRecord}\" class:active=\"{$recorder.status === 'STARTED'}\">\n    {buttonLabel[$recorder.status]}\n  </button>\n  <Counter on:stop=\"{stop}\" recorderStatus=\"{$recorder.status}\" />\n</section>\n",
    "<style>\n  time {\n    border: 1px solid;\n  }\n</style>\n\n<script>\n  import { createEventDispatcher } from 'svelte';\n\n  const dispatch = createEventDispatcher();\n  const maxRecorderSeconds = 5;\n  const intervalTime = 1000;\n\n  export let recorderStatus;\n\n  $: recorderStatus === 'STARTED' ? start() : stop();\n\n  let counter = 0;\n  let counterInterval;\n\n  function start() {\n    counterInterval = setInterval(incrementCounter, intervalTime);\n  }\n\n  function incrementCounter() {\n    counter === maxRecorderSeconds ? cancelInterval() : (counter += 1);\n  }\n\n  function cancelInterval() {\n    clearInterval(counterInterval);\n    counter = 0;\n    dispatch('stop');\n  }\n\n  function stop() {\n    if (counter) clearInterval(counterInterval);\n  }\n</script>\n\n<time>{counter}</time>\n"
  ],
  "names": [],
  "mappings": "AACE,IAAI,eAAC,CAAC,AACJ,QAAQ,CAAE,QAAQ,AACpB,CAAC;ACFD,SAAS,cAAC,CAAC,AACT,QAAQ,CAAE,QAAQ,AACpB,CAAC;ACFD,MAAM,cAAC,CAAC,AACN,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,KAAK,CACb,MAAM,CAAE,GAAG,CAAC,KAAK,AACnB,CAAC;ACJD,MAAM,cAAC,CAAC,AACN,UAAU,CAAE,KAAK,CACjB,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,CAAC,AACX,CAAC,AAED,MAAM,OAAO,cAAC,CAAC,AACb,UAAU,CAAE,GAAG,CACf,SAAS,CAAE,iBAAG,CAAC,KAAK,CAAC,QAAQ,AAC/B,CAAC,AAED,WAAW,iBAAI,CAAC,AACd,IAAI,AAAC,CAAC,AACJ,UAAU,CAAE,KAAK,AACnB,CAAC,AACD,EAAE,AAAC,CAAC,AACF,UAAU,CAAE,GAAG,AACjB,CAAC,AACH,CAAC;AClBD,IAAI,eAAC,CAAC,AACJ,MAAM,CAAE,GAAG,CAAC,KAAK,AACnB,CAAC"
}